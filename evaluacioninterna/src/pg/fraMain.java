/*
 * Clase que permite gestionar y agendar pacientes mediante una interfaz grafica 
 * y el uso de una base de datos en mysql
 */
package pg;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Moya
 */
public class fraMain extends javax.swing.JFrame {

    /**
     * Creates new form fraMain
     */
    public fraMain() {
        initComponents(); // se inician los componentes graficos como los jpanels, buttons, y labels
        comboUpdate(); // se cargan los datos, desde la base de datos, de los nombres de pacientes a un jcombobox 
        mostrarMatriz();// se muestran los datos de fechas agendadas durante la semana en los labels que se encuentran en un panel con gridlayout
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panCal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        pnaConf = new javax.swing.JPanel();
        Paciente = new javax.swing.JComboBox<>();
        Dia = new javax.swing.JComboBox<>();
        Hora = new javax.swing.JComboBox<>();
        Agr_Semana = new javax.swing.JButton();
        Pcn_Nuevo = new javax.swing.JButton();
        Txt_Nuevo = new javax.swing.JTextField();
        eliminarSemana = new javax.swing.JButton();
        eliminarNmbre = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestor de Pacientes");

        panCal.setBackground(new java.awt.Color(102, 102, 255));
        panCal.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.setPreferredSize(new java.awt.Dimension(640, 360));
        panCal.setLayout(new java.awt.GridLayout(13, 6));

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel1);

        jLabel2.setText("Lunes");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel2);

        jLabel3.setText("Martes");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel3);

        jLabel4.setText("Miercoles");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel4);

        jLabel5.setText("Jueves");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel5);

        jLabel6.setText("Viernes");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel6);

        jLabel7.setText("09:00");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel7);

        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel8);

        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel9);

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel10);

        jLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel11);

        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel12);

        jLabel13.setText("10:00");
        jLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel13);

        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel14);

        jLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel15);

        jLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel16);

        jLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel17);

        jLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel18);

        jLabel19.setText("11:00");
        jLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel19);

        jLabel20.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel20);

        jLabel21.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel21);

        jLabel22.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel22);

        jLabel23.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel23);

        jLabel24.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel24);

        jLabel25.setText("12:00");
        jLabel25.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel25);

        jLabel26.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel26);

        jLabel27.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel27);

        jLabel28.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel28);

        jLabel29.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel29);

        jLabel30.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel30);

        jLabel31.setText("15:00");
        jLabel31.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel31);

        jLabel32.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel32);

        jLabel33.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel33);

        jLabel34.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel34);

        jLabel35.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel35);

        jLabel36.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel36);

        jLabel37.setText("16:00");
        jLabel37.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel37);

        jLabel38.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel38);

        jLabel39.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel39);

        jLabel40.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel40);

        jLabel41.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel41);

        jLabel42.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel42);

        jLabel43.setText("17:00");
        jLabel43.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel43);

        jLabel44.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel44);

        jLabel45.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel45);

        jLabel46.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel46);

        jLabel47.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel47);

        jLabel48.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel48);

        jLabel49.setText("18:00");
        jLabel49.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel49);

        jLabel50.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel50);

        jLabel51.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel51);

        jLabel52.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel52);

        jLabel53.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel53);

        jLabel54.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel54);

        jLabel55.setText("19:00");
        jLabel55.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel55);

        jLabel56.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel56);

        jLabel57.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel57);

        jLabel58.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel58);

        jLabel59.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel59);

        jLabel60.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel60);

        jLabel61.setText("20:00");
        jLabel61.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel61);

        jLabel62.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel62);

        jLabel63.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel63);

        jLabel64.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel64);

        jLabel65.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel65);

        jLabel66.setBorder(javax.swing.BorderFactory.createLineBorder(null));
        panCal.add(jLabel66);

        pnaConf.setBackground(new java.awt.Color(0, 204, 204));
        pnaConf.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        Paciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {""}));
        Paciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PacienteActionPerformed(evt);
            }
        });

        Dia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes" }));

        Hora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00", "10:00", "11:00", "12:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00"}));
        Hora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoraActionPerformed(evt);
            }
        });

        Agr_Semana.setText("Agregar A La semana");
        Agr_Semana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Agr_SemanaActionPerformed(evt);
            }
        });

        Pcn_Nuevo.setText("Paciente Nuevo");
        Pcn_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pcn_NuevoActionPerformed(evt);
            }
        });

        Txt_Nuevo.setText("Nombre Paciente");
        Txt_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_NuevoActionPerformed(evt);
            }
        });

        eliminarSemana.setText("Eliminar de la semana");
        eliminarSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarSemanaActionPerformed(evt);
            }
        });

        eliminarNmbre.setText("Eliminar nombre");
        eliminarNmbre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarNmbreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnaConfLayout = new javax.swing.GroupLayout(pnaConf);
        pnaConf.setLayout(pnaConfLayout);
        pnaConfLayout.setHorizontalGroup(
            pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnaConfLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnaConfLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(eliminarNmbre))
                    .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnaConfLayout.createSequentialGroup()
                            .addComponent(Paciente, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(Dia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20))
                        .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnaConfLayout.createSequentialGroup()
                                .addComponent(eliminarSemana)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Agr_Semana))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnaConfLayout.createSequentialGroup()
                                .addComponent(Txt_Nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(Pcn_Nuevo)))))
                .addGap(89, 89, 89))
        );
        pnaConfLayout.setVerticalGroup(
            pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnaConfLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Paciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(eliminarNmbre)
                .addGap(18, 18, 18)
                .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agr_Semana)
                    .addComponent(eliminarSemana))
                .addGap(99, 99, 99)
                .addGroup(pnaConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pcn_Nuevo)
                    .addComponent(Txt_Nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panCal, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(pnaConf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panCal, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
            .addComponent(pnaConf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Txt_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_NuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_NuevoActionPerformed

    private void PacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PacienteActionPerformed

    private void HoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HoraActionPerformed

    private void Pcn_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pcn_NuevoActionPerformed
        // TODO add your handling code here:
        numF = false; // variable tipo boolean que sirve como flag para determinar si el nombre ingresado es valido
        ch = Txt_Nuevo.getText().toCharArray(); // se guarda el nombre ingresado en un char array
        var = Txt_Nuevo.getText(); // se guarda el nombre ingresado en una variable String
        if (var.length() >= 3) {  // se verifica si el nombre tiene 3 o mas letras
            System.out.println("Valido");
            for (char c : ch) { // for each que recorre el char array con el nombre
                if (Character.isLetter(c) || Character.isSpaceChar(c)) { // se lee el char array y se verifica que no contenga numeros/simbolos, o que sea un espacio
                    System.out.println("Valido");
                } else {
                    numF = true;
                }
            }
        } else {
            numF = true;
        }
        if (numF == false) {
            try {
                // se pasa el codigo sql de insercion al objeto preparestatement 
                PreparedStatement pst = conn.prepareStatement("Insert INTO listPAC(Nombre) VALUES (?)");
                pst.setString(1, Txt_Nuevo.getText());
                pst.executeUpdate(); //se actualiza la base de datos
            } catch (Exception e) {
                System.out.println("no se pudo guardar");
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "NOMBRE INGRESADO NO ES VALIDO", "ERROR: NOMBRE NO VALIDO", JOptionPane.ERROR_MESSAGE); // en caso de que se haya ingresado un nombre muy corto, o que contienne simbolos/numeros, saldra este JOptionPäne señalando el error
        }
        comboUpdate(); // se llama al metodo comboupdate, que actualiza los nombres del jcombobox conteniendo la lista de nombres de pacientes
    }//GEN-LAST:event_Pcn_NuevoActionPerformed

    // metodo que permite guardar los pacientes en la base de datos
    private void Agr_SemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Agr_SemanaActionPerformed
        // TODO add your handling code here:

        // se guardan los datos seleccionados de los combobox en variables tipo STRING
        Horas = (String) Hora.getSelectedItem();
        Dias = (String) Dia.getSelectedItem();
        Nombre = (String) Paciente.getSelectedItem();

        actualizarSemana(); // se llama al metodo actualizar semana

    }//GEN-LAST:event_Agr_SemanaActionPerformed

    //metodo que guarda datos en la base de datos de acuerdo a la hora y dia seleccionada de la semana a partir de los jcombobox
    private void actualizarSemana() {
        flag = false;
        // conjunto de switches que permiten guardar los valores ingresados en un lugar especifico dentro de la base de datos
        switch (Horas) {
            case "09:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel8.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora =  09");

                                //se actualiza la base de datos
                                pst.executeUpdate();

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }

                        break;
                    case "Martes":
                        if (jLabel9.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 09");

                                pst.executeUpdate(); // se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }

                        break;
                    case "Miercoles":
                        if (jLabel10.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 09");

                                pst.executeUpdate(); // se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel11.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 09");

                                pst.executeUpdate(); // se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel12.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 09");

                                pst.executeUpdate(); // se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "10:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel14.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 10");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel15.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 10");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Miercoles":
                        if (jLabel16.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 10");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel17.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 10");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel18.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 10");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "11:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel20.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 11");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel21.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 11");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Miercoles":
                        if (jLabel22.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 11");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel23.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 11");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel24.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 11");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "12:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel26.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 12");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel27.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 12");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Miercoles":
                        if (jLabel28.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 12");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel29.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 12");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel30.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 12");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "15:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel32.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 15");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel33.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 15");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Miercoles":
                        if (jLabel34.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 15");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel35.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 15");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel36.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 15");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "16:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel38.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 16");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel39.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 16");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Miercoles":
                        if (jLabel40.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 16");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Jueves":
                        if (jLabel41.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 16");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Viernes":
                        if (jLabel42.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 16");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "17:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel44.getText().length() < 3 || flag1 == true) {
                            try {
                                Statement st = conn.createStatement(); //Se genera el estado de conexion
                                // se pasa el codigo sql de modificacion al objeto preparestatement 
                                PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 17");

                                pst.executeUpdate(); //se actualiza la base de datos

                            } catch (Exception e) {
                                System.out.println("no se pudo guardar");
                                System.out.println(e.getMessage());
                            }
                        } else {
                            flag = true;
                        }
                        break;
                    case "Martes":
                        if (jLabel45.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 17");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Miercoles":
                        if (jLabel46.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 17");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Jueves":
                        if (jLabel47.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 17");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Viernes":
                        if (jLabel48.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 17");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "18:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel50.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 18");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Martes":
                        if (jLabel51.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 18");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Miercoles":
                        if (jLabel52.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 18");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Jueves":
                        if (jLabel53.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 18");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Viernes":
                        if (jLabel54.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 18");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "19:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel56.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 19");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Martes":
                        if (jLabel57.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 19");
                        //se actualiza la base de datos
                        pst.executeUpdate();

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Miercoles":
                        if (jLabel58.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 19");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Jueves":
                        if (jLabel59.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 19");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Viernes":
                        if (jLabel60.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 19");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    default:
                        throw new AssertionError();
                }
                break;
            case "20:00":
                switch (Dias) {
                    case "Lunes":
                        if (jLabel62.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Lunes SET nombre = '" + Nombre + "' WHERE Hora = 20");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Martes":
                        if (jLabel63.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Martes SET nombre = '" + Nombre + "' WHERE Hora = 20");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Miercoles":
                        if (jLabel64.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Miercoles SET nombre = '" + Nombre + "' WHERE Hora = 20");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Jueves":
                        if (jLabel65.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Jueves SET nombre = '" + Nombre + "' WHERE Hora = 20");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    case "Viernes":
                        if (jLabel66.getText().length() < 3 || flag1 == true){
                        try {
                        Statement st = conn.createStatement(); //Se genera el estado de conexion
                        // se pasa el codigo sql de modificacion al objeto preparestatement 
                        PreparedStatement pst = conn.prepareStatement("UPDATE Viernes SET nombre = '" + Nombre + "' WHERE Hora = 20");

                        pst.executeUpdate(); //se actualiza la base de datos

                    } catch (Exception e) {
                        System.out.println("no se pudo guardar");
                        System.out.println(e.getMessage());
                    }} else {
                            flag = true;
                        }
                    break;
                    default:
                        throw new AssertionError();
                }
                break;

            default:
                throw new AssertionError();
        }

        if (flag == true) {
            JOptionPane.showMessageDialog(null, "ERROR: YA HAY UN PACIENTE INGRESADO EN FECHA SELECCIONADA");
        }
        mostrarMatriz(); // se llama al metodo mostrarMatriz()
        flag1 = false;
    }

// metodo que elimina cita agendada en la semana
    private void eliminarSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarSemanaActionPerformed
        // TODO add your handling code here:

        // este metodo funciona de manera igual al metodo ""Agr_SemanaActionPerformed()"
        // lo unico que cambia es que se guarda un string vacio en la base de datos
        // se guardan los datos seleccionados de los combobox en variables tipo STRING
        Horas = (String) Hora.getSelectedItem();
        Dias = (String) Dia.getSelectedItem();
        // se establece que la variable "Nombre" este vacia para que se elimine la cita agendada
        Nombre = "";

        flag1 = true;
        actualizarSemana(); // se llama al metodo actualizar semana


    }//GEN-LAST:event_eliminarSemanaActionPerformed

    //metodo que permite eliminar un nombre del jcombobox que contiene los nombre de los pacientes
    private void eliminarNmbreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarNmbreActionPerformed
        // TODO add your handling code here:
        try {
            // se pasa el codigo sql de eliminacion de datos de una tabla, al objeto preparestatement 
            PreparedStatement pst = conn.prepareStatement("DELETE FROM listPAC WHERE Nombre = '" + Paciente.getSelectedItem() + "'");
            // se actualiza la base de datos
            pst.executeUpdate();

        } catch (Exception e) {
            System.out.println("no se pudo eliminar");
            System.out.println(e.getMessage());
        }

        comboUpdate(); // metodo que actualiza los valores del jcombobox conteniendo los nombres


    }//GEN-LAST:event_eliminarNmbreActionPerformed

    //metodo que permite actualizar los nombres de los JLabels en la semana
    private void mostrarMatriz() {
        try {
            Statement st = conn.createStatement(); //Se genera el estado de conexion

            ResultSet rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 09"); //se solicitan los datos a la base de datos

            if (rs.next()) { // if que verifica si se recibieron datos del mysql

                jLabel8.setText(rs.getString(2)); // se muestra el segundo valor recibido (nombre) en un label
            }
            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 09"); //se solicitan los datos a la base de datos

            if (rs.next()) { // if que verifica si se recibieron datos del mysql
                jLabel9.setText(rs.getString(2)); // se muestra el segundo valor recibido (nombre) en un label
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 09"); //se solicitan los datos a la base de datos

            if (rs.next()) {// if que verifica si se recibieron datos del mysql
                jLabel10.setText(rs.getString(2));// se muestra el segundo valor recibido (nombre) en un label
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 09"); //se solicitan los datos a la base de datos

            if (rs.next()) {// if que verifica si se recibieron datos del mysql
                jLabel11.setText(rs.getString(2));// se muestra el segundo valor recibido (nombre) en un label
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 09"); //se solicitan los datos a la base de datos

            if (rs.next()) {// if que verifica si se recibieron datos del mysql
                jLabel12.setText(rs.getString(2));// se muestra el segundo valor recibido (nombre) en un label
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 10");

            if (rs.next()) {
                jLabel14.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 10");

            if (rs.next()) {
                jLabel15.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 10");

            if (rs.next()) {
                jLabel16.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 10");

            if (rs.next()) {
                jLabel17.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 10");

            if (rs.next()) {
                jLabel18.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 11");

            if (rs.next()) {
                jLabel20.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 11");

            if (rs.next()) {
                jLabel21.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 11");

            if (rs.next()) {
                jLabel22.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 11");

            if (rs.next()) {
                jLabel23.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 11");

            if (rs.next()) {
                jLabel24.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 12");

            if (rs.next()) {
                jLabel26.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 12");

            if (rs.next()) {
                jLabel27.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 12");

            if (rs.next()) {
                jLabel28.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 12");

            if (rs.next()) {
                jLabel29.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 12");

            if (rs.next()) {
                jLabel30.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 15");

            if (rs.next()) {
                jLabel32.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 15");

            if (rs.next()) {
                jLabel33.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 15");

            if (rs.next()) {
                jLabel34.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 15");

            if (rs.next()) {
                jLabel35.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 15");

            if (rs.next()) {
                jLabel36.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 16");

            if (rs.next()) {
                jLabel38.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 16");

            if (rs.next()) {
                jLabel39.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 16");

            if (rs.next()) {
                jLabel40.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 16");

            if (rs.next()) {
                jLabel41.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 16");

            if (rs.next()) {
                jLabel42.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 17");

            if (rs.next()) {
                jLabel44.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 17");

            if (rs.next()) {
                jLabel45.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 17");

            if (rs.next()) {
                jLabel46.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 17");

            if (rs.next()) {
                jLabel47.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 17");

            if (rs.next()) {
                jLabel48.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 18");

            if (rs.next()) {
                jLabel50.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 18");

            if (rs.next()) {
                jLabel51.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 18");

            if (rs.next()) {
                jLabel52.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 18");

            if (rs.next()) {
                jLabel53.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 18");

            if (rs.next()) {
                jLabel54.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 19");

            if (rs.next()) {
                jLabel56.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 19");

            if (rs.next()) {
                jLabel57.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 19");

            if (rs.next()) {
                jLabel58.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 19");

            if (rs.next()) {
                jLabel59.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 19");

            if (rs.next()) {
                jLabel60.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Lunes WHERE Hora = 20");

            if (rs.next()) {
                jLabel62.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Martes WHERE Hora = 20");

            if (rs.next()) {
                jLabel63.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Miercoles WHERE Hora = 20");

            if (rs.next()) {
                jLabel64.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Jueves WHERE Hora = 20");

            if (rs.next()) {
                jLabel65.setText(rs.getString(2));
            }

            rs = st.executeQuery("SELECT Hora, Nombre FROM Viernes WHERE Hora = 20");

            if (rs.next()) {
                jLabel66.setText(rs.getString(2));
            }

        } catch (Exception e) {
            System.out.println("no te pasa que: " + e.getMessage());

        }

    }

    // metodo que permite actualizar los nombres del jcombobox que contiene los nombres de los pacientes
    private void comboUpdate() {
        Paciente.removeAllItems(); // se eliminan los valores que existan en el jcombobox
        try {
            Statement st = conn.createStatement(); //Se genera el estado de conexion
            ResultSet rs = st.executeQuery("SELECT * from listPAC"); //se genera el objeto para ejecutar el codigo sql que solicita datos a la base de mysql
            while (rs.next()) { // while que recorre los datos recibidos                
                Paciente.addItem(rs.getString(1)); // se guarda el valor recibido en el jcombobox que conntiene los nombres de pacientes
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fraMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fraMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fraMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fraMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fraMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agr_Semana;
    private javax.swing.JComboBox<String> Dia;
    private javax.swing.JComboBox<String> Hora;
    private javax.swing.JComboBox<String> Paciente;
    private javax.swing.JButton Pcn_Nuevo;
    private javax.swing.JTextField Txt_Nuevo;
    private javax.swing.JButton eliminarNmbre;
    private javax.swing.JButton eliminarSemana;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel panCal;
    private javax.swing.JPanel pnaConf;
    // End of variables declaration//GEN-END:variables
    // mas variables
    conectar conBD = new conectar();
    Connection conn = conBD.conexion();
    String Dias, Horas, Nombre, var;
    Boolean numF, flag = false, flag1 = false;
    char[] ch;
    // se acabaron las variables
}
